import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Scanner;
import java.util.Set;

class Person {
    int id;
    List<String> languages;

    public Person(int id, List<String> languages) {
        this.id = id;
        this.languages = languages;
    }
}

public class TranslationChain {

    static boolean canCommunicate(Person person1, Person person2, List<Person> people) {
        Set<String> langSet = new HashSet<>(person1.languages);

        for (String lang : person2.languages) {
            if (langSet.contains(lang)) {
                return true;
            }
        }

        return false;
    }

    static List<Integer> findTranslationChain(int person1Id, int person2Id, List<Person> people) {
        List<Integer> translationChain = new ArrayList<>();

        if (person1Id == person2Id) {
            return translationChain;
        }

        Person person1 = people.get(person1Id - 1);
        Person person2 = people.get(person2Id - 1);

        if (canCommunicate(person1, person2, people)) {
            translationChain.add(person1Id);
            translationChain.add(person2Id);
            return translationChain;
        }

        for (int i = 0; i < people.size(); ++i) {
            if (i + 1 != person1Id && i + 1 != person2Id) {
                if (canCommunicate(person1, people.get(i), people) && canCommunicate(people.get(i), person2, people)) {
                    translationChain.add(person1Id);
                    translationChain.add(i + 1);
                    translationChain.add(person2Id);
                    return translationChain;
                }
            }
        }

        return translationChain;
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        List<Person> people = List.of(
                new Person(1, List.of("hindi", "english", "gujarati")),
                new Person(2, List.of("hindi", "odia")),
                new Person(3, List.of("tamil", "english")),
                new Person(4, List.of("odia", "spanish")),
                new Person(5, List.of("gujarati", "tamil")),
                new Person(6, List.of("tamil", "odia")),
                new Person(7, List.of("telugu", "english")),
                new Person(8, List.of("telugu", "hindi")),
                new Person(9, List.of("marathi", "hindi")),
                new Person(10, List.of("english", "spanish"))
        );

        System.out.println("Give Person1 And Person2:");
        int person1Id = scanner.nextInt();
        int person4Id = scanner.nextInt();

        List<Integer> translationChain = findTranslationChain(person1Id, person4Id, people);

        int size = translationChain.size();

        if (translationChain.isEmpty()) {
            System.out.println("No communication possible between Person " + person1Id + " and Person " + person4Id);
        } else {
            System.out.print("Translation chain between Person " + person1Id + " and Person " + person4Id + ": ");

            for (int i = 0; i < size - 1; i++) {
                System.out.print(translationChain.get(i) + "--->");
            }

            System.out.println(translationChain.get(size - 1));
        }
    }
}
